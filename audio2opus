#!/bin/bash

# conveniency function printing help/usage information
usage() {
	echo "Usage:
	$0 [--outdir <output directory> | -o <output directory> ] [ --mail <email address> | -m <email address> ] [ --if-worthwhile | -w ] [ <input directory> ]
	$0 [--replace | -r ] [ --mail <email address> | -m <email address> ] [ --if-worthwhile | -w ] [ <input directory> ]
	$0 [--help | -h ]"
}

# convenciency function printing an error message for when --outdir and --replace are both set
outdir_replace_error() {
	printf 'ERROR: output-directory mode and replace-mode are incompatible.\n' >&2
}

# convenciency function printing an error message when an options requries a non-empty argument following but there isn't one
missing_arg_error() {
	printf 'ERROR: "%s" requires a non-empty option argument.\n' "$1" >&2
}

# as the name says; $1 is the prefix, $2 the string
# ADHOC: in our use case $1 is a folder and $2 a file somewhere under it, both in canonical form
# so we will want to strip one character "too many" as it will be an unwanted /
# NB i would gladly use the ${x#y} bashism, but it breaks when the filenames have weird characters :)))))))
strip_prefix_from_string() {
	local i=0
 	local prefix="$1"
 	local string="$2"
	while [[ "${prefix:$i:1}" == "${string:$i:1}" ]]; do ((i++)); done
	((i++)) # SPECIAL: will kill leftover leading /
	echo "${string:$i}"
}

# abort in case of SIGINT (see trap below)
user_abort() {
	echo "SIGINT caught. Aborting process." >&2
	exit 2
}


##### PRELIMINARIES #####

# set SIGINT trap
trap user_abort SIGINT

# parse command-line options
while :; do
	case "$1" in
		-h|--help)
		# print help
			usage
			exit
			;;
		-o|--outdir)
		# set outdir
			if [[ -n "$replace" ]]; then
				outdir_replace_error
				exit 1
			fi
			if [[ -n "$2" ]]; then
				# canonicalize path (i.e. ensure it's absolute)
				outdir="$(readlink -f $2)"
				shift
			else
				missing_arg_error "--outdir"
				exit 1
			fi
			;;
		-r|--replace)
		# program will replace input files with output instead of putting them in a separate folder
			if [[ -n "$outdir" ]]; then
				outdir_replace_error
				exit 1
			fi
			replace=1
			;;
		-w|--if-worthwhile)
		# program will process files only if their (average) birate is above 128kbps
			ifworthwhile=1
			;;
		-m|--mail)
		# program will send email notification
			if [[ -n "$2" ]]; then
				email="$2"
				shift
			else
				missing_arg_error "--mail"
				exit 1
			fi
			;;
		-?*)
		# unrecognized
			printf 'ERROR: Unkown option "%s"\n' "$1" >&2
			usage
			exit 1
			;;
		*)
		# end of options, leave case statement
			break
			;;
	esac
	shift
done

# read file search root directory if provided, default to PWD otherwise
if [[ -z "$1" ]]; then
	indir="$PWD"
else
	# make sure it's canonicalized!
	indir="$(readlink -f $1)"
fi

# figure out outdir and prepare it in the filesystem if necessary
if [[ -n "$replace" ]]; then
	# running in replace mode
	outdir="$indir"
else
	# running in output-drectory mode
	# default to $indir/opus if --outdir wasn't set
	[[ -z "$outdir" ]] && outdir="$indir/opus"
	# create the output directory if it doesn't exist
	mkdir -p "$outdir"
fi


##### WORK #####

# enable globstar for recursive file search
shopt -s globstar nullglob

# we'll keep track of which file we manage to reencode and which fail
successes=( )
failures=( )
# compute list of input and output
for infile in "$indir"/**/*.{flac,mp3,wav,mpc,wma,m4a,mp4,ape}; do
	# only accept file candidate if worthwhile (TODO: fix grep so we skip sed)
	if [[ -z "$ifworthwhile" || $(ffprobe "$x" 2>&1 | grep Audio: | sed 's/.*, \([0-9]*\) kb\/s.*/\1/') > 128 ]]; then
		# get target location relative to $indir
		outfile=$(strip_prefix_from_string "$indir" "$infile")
		outfile="${outfile%.*}.opus"
		# get target folder as relative to $indir so we can recreate it under $outdir
		if grep -q '/' <<< "$outfile"; then 
			targetdir="${outfile%/*}"
		else
			targetdir=''
		fi
		mkdir -p "$outdir/$targetdir"

		# actual reencode
		[[ -n "$targetdir" ]] && mkdir -p "$targetdir"
		if ffmpeg -n -i "$infile" -map 0:a -c:a libopus -vbr on -compression_level 10 -b:a 128000 "$outdir/$outfile"; then
			# ffmpeg exited with success, file should have been reencoded
			successes+=( "$outfile" )

			# IMPORTANT! if running in replace mode, delete the input file
			[[ -n "$replace" ]] && rm "$infile"
		else
			# there was a failure of some kind
			failures+=( "$infile" )
		fi
	fi
done


##### EMAIL NOTIFICATION #####

# exit peacefully if not requested
[[ -z "$email" ]] && exit

# setup body
mailbody="Reencoding $indir in Opus: done."

if [[ "${#successes[@]}" = 0 ]]; then
	mailbody+=$'\nNo file was successfully reencoded.'
else
	mailbody+=$'\nThe following files were successfully generated under directory '"$outdir:"
	mailbody+=$'\n'"$(printf '%s\n' ${successes[@]})"
fi
mailbody+=$'\n'

if [[ "${#failures[@]}" = 0 ]]; then
	mailbody+=$'\nAll input files were processed.'
else
	mailbody+=$'\n There was an error processing the following files:'
	mailbody+=$'\n'"$(printf '%s\n' ${failures[@]})"
fi

# send
mail -s "Reencoding ${indir##*/} in Opus" "$email" <<< "$mailbody"
