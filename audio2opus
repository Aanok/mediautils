#!/bin/bash
# POSIX

# conveniency function printing help/usage information
usage() {
	echo "Usage:"
	echo " $0 [ --outdir <output directory> | -o <output directory> ] [ --mail <email address> | -m <email address> ] [ --if-worthwhile | -w ] [ <input directory> ]"
	echo " $0 [ --replace | -r ] [ --mail <email address> | -m <email address> ] [ --if-worthwhile | -w ] [ <input directory> ]"
	echo " $0 [ --help | -h ]"
}

# convenciency function printing an error message for when --outdir and --replace are both set
outdir_replace_error() {
	printf 'ERROR: output-directory mode and replace-mode are incompatible.\n' >&2
}

# convenciency function printing an error message when an options requries a non-empty argument following but there isn't one
missing_arg_error() {
	printf 'ERROR: "%s" requires a non-empty option argument.\n' "$1" >&2
}



##### PRELIMINARIES #####

# parse command-line options
while :; do
	case $1 in
		-h|--help)
		# print help
			usage
			exit
			;;
		-o|--outdir)
		# set outdir
			if [ -n "$REPLACE" ]; then
				outdir_replace_error
				exit 1
			fi
			if [ -n "$2" ]; then
				OUTDIR="$2"
				shift
			else
				missing_arg_error "--outdir"
				exit 1
			fi
			;;
		-r|--replace)
		# program will replace input files with output instead of putting them in a separate folder
			if [ -n "$OUTDIR" ]; then
				outdir_replace_error
				exit 1
			fi
			REPLACE=1
			;;
		-w|--if-worthwhile)
		# program will process files only if their (average) birate is above 128kbps
			IFWORTHWHILE=1
			;;
		-m|--mail)
		# program will send email notification
			if [ -n "$2" ]; then
				EMAIL="$2"
				shift
			else
				missing_arg_error "--mail"
				exit 1
			fi
			;;
		-?*)
		# unrecognized
			printf 'ERROR: Unkown option "%s"\n' "$1" >&2
			usage
			exit 1
			;;
		*)
		# end of options, leave case statement
			break
			;;
	esac
	shift
done

# read file search root directory if provided, default to PWD otherwise
if [ -z "$1" ]; then
	INDIR="$PWD"
else
	INDIR="$1"
fi

# figure out OUTDIR and prepare it in the filesystem if necessary
if [ -n "$REPLACE" ]; then
	# running in replace mode
	OUTDIR="$INDIR"
else
	# running in output-drectory mode
	# default to $INDIR/opus if --outdir wasn't set
	if [ -z "$OUTDIR" ]; then OUTDIR="$INDIR/opus"; fi
	# create the output directory if it doesn't exist
	if [ ! -d "$OUTDIR" ]; then mkdir "$OUTDIR"; fi
fi




##### WORK #####

# enable globstar for recursive file search
shopt -s globstar
# enable extglob for better pattern matching
shopt -s extglob

# compute list of input and output
declare -a INPUT
declare -a OUTPUT
i=0
for x in "$INDIR"/**/*.@(flac|mp3|wav|mpc|wma|m4a|mp4|ape); do
	# only accept file candidate if worthwhile
	if [[ -z $IFWORTHWHILE ]] || [[ $(ffprobe "$x" 2>&1 | grep Audio: | sed 's/.*, \([0-9]*\) kb\/s.*/\1/') > 128 ]]; then
		INPUT[$i]="$x"
		y="${x##$INDIR/}"
		y="${y%.*}.opus"
		OUTPUT[$i]="$y"
		((i++))
	fi
done

# we'll keep track of which file we manage to reencode and which fail
successes=( )
failures=( )
# execute actual reencoding operations
i=0
while [ -n  "${INPUT[$i]}" ]; do
	# check for output subdirectory, create it if it doesn't exist
	# output subdirectory is basically the path of the output file, minus its basename
  # so we match everything there is up to the last "/", or an empty string if there isn't one (i.e. the file is in the base dir)
  targetdir="$(echo ${OUTPUT[$i]} | sed -n 's/\(^.*\)\(\/.*\)/\1/p')"
	if [ -n "$targetdir" ] && [ ! -d "$targetdir" ]; then mkdir "$targetdir"; fi
	if ffmpeg -n -i "${INPUT[$i]}" -map 0:a -c:a libopus -vbr on -compression_level 10 -b:a 128000 "$OUTDIR/${OUTPUT[$i]}"; then
		# ffmpeg exited with success, file should have been reencoded
		successes=( "${successes[@]}" "${OUTPUT[$i]}" )

		# IMPORTANT! if running in replace mode, delete the input file
		if [ -n "$REPLACE" ]; then rm "${INPUT[$i]}"; fi
	else
		# there was a failure of some kind
		failures=( "${failures[@]}" "${INPUT[$i]}" )
	fi
	((i++))
done
echo 'done'
exit



##### EMAIL NOTIFICATION #####

if [ -z "$EMAIL" ];
	# email notification not requested, exit peacefully
	exit
fi

# setup body
mailbody="Reencoding $INDIR in Opus: done."

if [ ${#successes[@]} = 0 ]; then
	mailbody="$mailbody"$'\nNo file was successfully reencoded.'
else
	mailbody="$mailbody"$'\nThe following files were successfully generated under directory '"$OUTDIR:"
	mailbody="$mailbody"$'\n'`printf '%s\n' "${successes[@]}"`$'\n'
fi

if [ ${#failures[@]} = 0 ]; then
        mailbody="$mailbody"$'\nAll input files were processed.'
else
        mailbody="$mailbody"$'\n There was an error processing the following files:'
        mailbody="$mailbody"$'\n'`printf '%s\n' "${failures[@]}"`
fi

# send
echo "$mailbody" | mail -s "Reencoding ${INDIR##*/} in Opus" "$EMAIL"
