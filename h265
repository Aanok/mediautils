#!/bin/bash
# h265 - batch video encoding to HEVC via ffmpeg


##### FUNCTIONS #####

# conveniency function printing help/usage information
usage() {
	echo "Usage:"
	echo "$0
	--map-args <stream mapping options> (default: -map 0) (please pass them in single quotes)
	--opus [bitrate]
	--downmix-stereo
	--outdir <output directory> (default: ./reencode)
	--wipe-metadata [t] (pass t to preserve attachment metadata)
	--720p | --1080p
	--quality <CRF> (default: 20)
	--sharpen
	--misc-args <arbitrary ffmpeg arguments> (please pass them in single quotes)
	--dry-run"
}

# convenciency function printing an error message when an options requries a non-empty argument following but there isn't one
missing_arg_error() {
	printf 'ERROR: "%s" requires a non-empty option argument.\n' "$1" >&2
}

# conveniency function printing an error message when two incompatible options have been passed together
incompatible_arg_error() {
	printf 'ERROR: option "%s" is incompatible with "%s".\n' "$1" "$2" >&2
}


##### PRELIMINARIES #####

# set defaults

# OUTPUT DIRECTORY
OUTDIR=reencode

# STREAM MAPPING
MAPARGS=('-map' '0')

# AUDIO CODEC
AUDIOCODEC="copy"

# VIDEO QUALITY
VQUAL="20"

# ARGUMENT VQUAL IS PASSED TO
VQUAL_ARG='-crf'

# VIDEO ENCODER
VENC=('-pix_fmt' 'yuv420p10' '-c:v' 'libx265' '-preset' 'slow')

# FFMPEG EXECUTABLE
PROGRAM='ffmpeg'


# load configuration files
if [[ -f '/etc/h265' ]]; then
	source '/etc/h265'
fi
if [[ -n "${XDG_CONFIG_HOME}" ]]; then
	USER_CONFIG_PREFIX="${XDG_CONFIG_HOME}"
else
	USER_CONFIG_PREFIX="${HOME}/.config"
fi
if [[ -f "${USER_CONFIG_PREFIX}/h265" ]]; then
	source "${USER_CONFIG_PREFIX}/h265"
fi


# parse command-line options
while :; do
	case "$1" in
	-h|--help)
	# print usage information
		usage
		exit
		;;
	--map-args)
	# set stream mapping
		if [[ -n "$2" ]]; then
			# mind the lack of quotes for $2: Bash is a special boy when strings start with -
			MAPARGS=( $2 )
			shift
		else
			missing_arg_error "--map-args"
			exit 1
		fi
		;;
	--misc-args)
	# arbitrary arguments
		if [[ -n "$2" ]]; then
		# likewise lack of quotes, see above
			MISCARGS=( $2 )
			shift
		else
			missing_arg_error "--misc-args"
			exit 1
		fi
		;;
	--opus)
	# set audio conversion to Opus
		AUDIOCODEC=('libopus' '-vbr' 'on' '-compression_level' '10' '-b:a')
		# check for optional bitrate argument
		if [[ -n "$2" && "$2" != -* ]]; then
			AUDIOCODEC+=( "$2" )
			shift
		else
			AUDIOCODEC+=( "128000" )
		fi
		;;
	--downmix-stereo)
	# set downmix of 5.1 surround channels to stereo
		DOWNMIX=(-ac 2 -af 'pan=stereo|FL=FC+0.30*FL+0.30*BL|FR=FC+0.30*FR+0.30*BR')
		;;
	--outdir)
	# set output directory
		if [[ -n "$2" ]]; then
			OUTDIR="$2"
			shift
		else
			missing_arg_error "--outdir"
			exit 1
		fi
		;;
	--wipe-metadata)
	# start from blank slate metadata in output file (NB will preserve chapters)
		METADATAARGS+=( '-map_metadata' '-1'  )
		# carry over attachment metadata, required if e.g. there are font attachments
		if [[ -n "$2" && "$2" == "t" ]]; then
			METADATAARGS+=( '-map_metadata:s:t' '0:s:t' )
			shift
		fi
		;;
	--720p)
	# scale to 720p height
		if [[ -n "$TENEIGHTY" ]]; then
			incompatible_arg_error "--720p" "--1080p"
			exit 1
		fi
		if [[ -n "$VIDEOFILTER" ]]; then
			VIDEOFILTER="scale=w=-2:h=720,$VIDEOFILTER"
		else
			VIDEOFILTER="scale=w=-2:h=720"
		fi
		SEVENTWENTY=1
		;;
	--1080p)
	# scale to 1080p height
		if [[ -n "$SEVENTWENTY" ]]; then
			incompatible_arg_error "--1080p" "--720p"
			exit 1
		fi
		if [[ -n "$VIDEOFILTER" ]]; then
			VIDEOFILTER="scale=w=-2:h=1080,$VIDEOFILTER"
		else
			VIDEOFILTER="scale=w=-2:h=1080"
		fi
		TENEIGHTY=1
		;;
	--quality)
	# set CRF/QP
		if [[ -n "$2" ]]; then
			VQUAL="$2"
			shift
		else
			mising_arg_error "--quality"
			exit 1
		fi
		;;
	--sharpen)
	# apply unsharp filter
		if [[ -n "$VIDEOFILTER" ]]; then
			VIDEOFILTER="$VIDEOFILTER,unsharp=3:3"
		else
			VIDEOFILTER="unsharp=3:3"
		fi
		;;
	--dry-run)
	# print ffmpeg commands without running
	PROGRAM=( 'echo' 'ffmpeg' )
		;;
	-?*)
	# unrecognized
		printf 'ERROR: Unkown option "%s"\n' "$1" >&2
		usage
		exit 1
		;;
	*)
	# end of options, leave case statement
	  break
	  ;;
	esac
	shift
done


# add parameter in front if we're gonna use it
if [[ -n "$VIDEOFILTER" ]]; then
	VIDEOFILTER=( '-vf' "$VIDEOFILTER")
fi


# we always add CRF to video stream metadata
METADATAARGS+=( '-metadata:s:v:0' "h265_crf=$VQUAL" )


# figure out a task name
shopt -s extglob
if [[ "$PWD" == */[sS]@(eason\ +([0-9])|pecial?(s))* ]]; then
	taskname="${PWD%%/[sS]@(eason\ +([0-9])|pecial?(s))*}"
	taskname="${taskname##*/}"
else
	taskname="${PWD##*/}"
fi

# figure out if background execution
if [[ $(ps -o stat= -p $$) == *+* ]]; then
	# Running in foreground
	STDINSRC='/dev/stdin'
	STDOUTDEST='/dev/stdout'
	STDERRDEST='/dev/stderr'
else
	# Running in background
	STDINSRC='/dev/null'
	STDOUTDEST='/dev/null'
	STDERRDEST='ffmpeg.log'
fi


##### WORK #####

# create output directory if it doesn't exist
if [[ ! -d "$OUTDIR" ]]; then mkdir -p "$OUTDIR"; fi

# compute list of input and output
INPUT=()
OUTPUT=()
for x in *.{mkv,mp4,avi,m2ts}; do
	INPUT+=( "$x" )
	OUTPUT+=( "${x%.*}.mkv" )
done


# we'll keep track of successes and failures
successes=()
failures=()
# execute actual reencoding operations
i=0
while [[ -n "${INPUT[$i]}" ]]; do
	ARGS=(-n -i "${INPUT[$i]}" "${SIZE[@]}" "${MAPARGS[@]}" "${METADATAARGS[@]}" "${VENC[@]}" "${VIDEOFILTER[@]}" "${VQUAL_ARG[@]}" "${VQUAL[@]}" -c:a "${AUDIOCODEC[@]}" -c:s copy "${DOWNMIX[@]}" "${MISCARGS[@]}" "$OUTDIR/${OUTPUT[$i]}")

	if "${PROGRAM[@]}" "${ARGS[@]}" <$STDINSRC >$STDOUTDEST 2>$STDERRDEST; then
	# ffmpeg exited with success, file should have been reencoded
		successes+=( "${OUTPUT[$i]}" )
	else
	# there was a failure of some kind
		failures+=( "${INPUT[$i]}" )
	fi
	((i++))
done


##### EMAIL NOTIFICATION #####

MAILBODY="Reencoding attempt of $taskname completed."

if [[ ${#successes[@]} = 0 ]]; then
	MAILBODY="$MAILBODY"$'\nNo file was successfully reencoded.'
else
	MAILBODY="$MAILBODY"$'\nThe following files were successfully generated under directory '"$OUTDIR:"
	MAILBODY=$(printf '%s\n%s\n' "$MAILBODY" "${successes[@]}")
fi
MAILBODY="$MAILBODY"$'\n'

if [[ ${#failures[@]} = 0 ]]; then
	MAILBODY="$MAILBODY"$'\nAll input files were processed.'
else
	MAILBODY="$MAILBODY"$'\nThere was an error processing the following files:'
	MAILBODY=$(printf '%s\n%s\n' "$MAILBODY" "${failures[@]}")
fi

# send mail notification
if [[ "$PROGRAM" != 'echo' ]] && [[ -n "$MAILDEST" ]]; then
	mailargs=( '-s' "Reencoding $taskname" )
	if [[ -f 'ffmpeg.log' ]]; then
		mailargs+=( '-A' 'ffmpeg.log' )
	fi
	mailargs+=( "$MAILDEST" )
	echo "$MAILBODY" | mail "${mailargs[@]}" >$STDOUTDEST 2>$STDERRDEST
fi
